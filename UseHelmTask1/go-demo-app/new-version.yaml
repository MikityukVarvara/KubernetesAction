---
# Source: helm/charts/nats/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-nats
  namespace: default
  labels:
    helm.sh/chart: nats-0.15.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.7.4"
    app.kubernetes.io/managed-by: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nats
      app.kubernetes.io/instance: release-name
---
# Source: helm/charts/api-gateway/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador
  namespace: default
---
# Source: helm/templates/secret.yaml
apiVersion: v1
data:
  license: MTIzNDU=
kind: Secret
metadata:
  name: release-name-secret
  namespace: default
  labels:
    version: v4
---
# Source: helm/charts/nats/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-nats-config
  namespace: default
  labels:
    helm.sh/chart: nats-0.15.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.7.4"
    app.kubernetes.io/managed-by: Helm
data:
  nats.conf: |
    # NATS Clients Port
    port: 4222

    # PID file shared with configuration reloader.
    pid_file: "/var/run/nats/nats.pid"

    ###############
    #             #
    # Monitoring  #
    #             #
    ###############
    http: 8222
    server_name:$POD_NAME
    lame_duck_grace_period: 10s
    lame_duck_duration: 30s
---
# Source: helm/templates/app-configmap.yaml
apiVersion: v1
data:
  key: demo
kind: ConfigMap
metadata:
  name: release-name-configmap
  namespace: default
  labels:
    version: v4
---
# Source: helm/charts/api-gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ambassador
  namespace: default
rules:
- apiGroups: [""]
  resources:
  - services
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["create", "update", "patch", "get", "list", "watch"]
- apiGroups: [""]
  resources:
  - secrets
  verbs: ["get", "list", "watch"]
---
# Source: helm/charts/api-gateway/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ambassador
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ambassador
subjects:
- kind: ServiceAccount
  name: ambassador
  namespace: default
---
# Source: helm/charts/api-gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador
  name: ambassador
  namespace: default
spec:
  type: NodePort
  ports:
  - name: ambassador-http
    port: 80
    targetPort: 80
  selector:
    service: ambassador
---
# Source: helm/charts/api-gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador-admin
  name: ambassador-admin
  namespace: default
spec:
  type: ClusterIP
  ports:
  - name: ambassador-admin
    port: 8877
    targetPort: 8877
  selector:
    service: ambassador
---
# Source: helm/charts/db-nosql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cache
  namespace: default
  labels:
    app: cache
spec:
  ports:
  - name: tcp-cache
    port: 6379
    targetPort: 6379
  selector:
    app: cache
---
# Source: helm/charts/db-sql/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: default
  labels:
    app: db
spec:
  ports:
  - name: tcp-db
    port: 3306
    targetPort: 3306
  selector:
    app: db
---
# Source: helm/charts/nats/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-nats
  namespace: default
  labels:
    helm.sh/chart: nats-0.15.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.7.4"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: client
    port: 4222
  - name: cluster
    port: 6222
  - name: monitor
    port: 8222
  - name: metrics
    port: 7777
  - name: leafnodes
    port: 7422
  - name: gateways
    port: 7522
---
# Source: helm/templates/api-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-api
  namespace: default
  labels:
    app: api
    version: v4
  annotations:
    
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind:  Mapping
      name:  release-name-api-api
      prefix: /api/
      service: release-name-api
      headers:
        x-mode: qa
      weight: 5
       
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-api
---
# Source: helm/templates/ascii-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-ascii
  namespace: default
  labels:
    app: ascii
    version: v4
  annotations:
   getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind:  Mapping
      name:  release-name-ascii
      prefix: /ascii/
      service: release-name-ascii
      headers:
        x-mode: qa
      weight: 5
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-ascii
---
# Source: helm/templates/data-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-data
  namespace: default
  labels:
    app: data
    version: v4 
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-data
---
# Source: helm/templates/front-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-front
  namespace: default
  labels:
    app: front
    version: 3.0.1
  annotations:
    
    getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind:  Mapping
      name:  release-name-front
      prefix: /
      service: release-name-front
      headers:
        x-mode: qa
      weight: 5
       
spec:
  ports:
  - name: http-front
    port: 80
    targetPort: 8080
  selector:
    app: release-name-front
---
# Source: helm/templates/img-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-img
  namespace: default
  labels:
    app: img
    version: v4
  annotations:
   getambassador.io/config: |
      ---
      apiVersion: ambassador/v1
      kind:  Mapping
      name:  release-name-img
      prefix: /img/
      service: release-name-img
      
        
      
spec:      
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: release-name-img
---
# Source: helm/charts/api-gateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador
  namespace: default
spec:
  selector:
    matchLabels:
      service: ambassador
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        service: ambassador
    spec:
      serviceAccountName: ambassador
      containers:
      - name: ambassador
        image: quay.io/datawire/ambassador:0.51.2
        resources:
          limits:
            cpu: 500m
            memory: 400Mi
          requests:
            cpu: 200m
            memory: 200Mi
        env:
        - name: AMBASSADOR_SINGLE_NAMESPACE
          value: default
        - name: AMBASSADOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace          
        livenessProbe:
          httpGet:
            path: /ambassador/v0/check_alive
            port: 8877
          initialDelaySeconds: 30
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /ambassador/v0/check_ready
            port: 8877
          initialDelaySeconds: 30
          periodSeconds: 3
---
# Source: helm/charts/db-nosql/templates/deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: cache
  namespace: default
  labels:
    service: cache
spec:
  selector:
    matchLabels:
      app: cache
  replicas: 1
  template:
    metadata:
      labels:
        app: cache
    spec:
      containers:
      - name: redis
        image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
# Source: helm/charts/db-sql/templates/deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: db
  namespace: default
  labels:
    service: db
spec:
  selector:
    matchLabels:
      app: db
  replicas: 1
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
      - name: db
        image: mysql  # or just image: percona
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "true"
        - name: MYSQL_DATABASE
          value: "demo"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 3306
---
# Source: helm/charts/nats/templates/nats-box.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-nats-box
  namespace: default
  labels:
    app: release-name-nats-box
    chart: nats-0.15.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-nats-box
  template:
    metadata:
      labels:
        app: release-name-nats-box
    spec:
      volumes:
      containers:
      - name: nats-box
        image: natsio/nats-box:0.8.1
        imagePullPolicy: IfNotPresent
        resources:
          null
        env:
        - name: NATS_URL
          value: release-name-nats
        command:
        - "tail"
        - "-f"
        - "/dev/null"
        volumeMounts:
---
# Source: helm/templates/api-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-api
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: release-name-api
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-api
        version: v4
    spec:
      containers:
      - name: api
        image: denvasyliev/k8sdiy:build-802e329
        command:
          - ./app
          - "-role"
          - "api"
          - "-server"
          - nats-cluster
        imagePullPolicy: Always
        env:
          - name: APP_BACKEND
            value: "iscii"
          - name: APP_DATASTORE
            value: "data"
          - name: APP_DB
            value: "root@tcp(db:3306)/demo"
          - name: APP_CACHE
            value: "cache"
          - name: APP_LICENSE
            valueFrom:
              secretKeyRef:
                name: release-name-secret
                key: license
        volumeMounts:
        - name: data
          mountPath: /data
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
          name: http
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 3
      volumes:
        - name: data
          configMap:
            name: release-name-configmap
---
# Source: helm/templates/ascii-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-ascii
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: release-name-ascii
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-ascii
        version: v4
    spec:
      containers:
      - name: ascii
        image: denvasyliev/k8sdiy:build-802e329
        command:
          - ./app
          - "-role"
          - "ascii"
          - "-server"
          - nats-cluster
        imagePullPolicy: Always
        env:
          - name: APP_DATASTORE
            value: "data"
          - name: APP_DB
            value: "root@tcp(db:3306)/demo"
          - name: APP_CACHE
            value: "cache"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
          name: http
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          periodSeconds: 3
---
# Source: helm/templates/data-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-data
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: release-name-data
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-data
        version: v4
    spec:
      containers:
      - name: data
        image: denvasyliev/k8sdiy:build-802e329
        command:
          - ./app
          - "-role"
          - "data"
          - "-server"
          - nats-cluster
        env:
          - name: APP_DB
            value: "root@tcp(db:3306)/demo"
          - name: APP_CACHE
            value: "cache"
          - name: APP_CACHE_PORT
            value: "6379"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
        name: data
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 3
---
# Source: helm/templates/front-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-front
  namespace: default
  labels:
    version: 3.0.1
spec:
  selector:
    matchLabels:
      app: release-name-front
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-front
        version: 3.0.1
    spec:
      containers:
      - name: front
        image: denvasyliev/k8sdiy:build-802e329
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
          name: http-front
        securityContext:
---
# Source: helm/templates/img-deploy.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: release-name-img
  namespace: default
  labels:
    version: v4
spec:
  selector:
    matchLabels:
      app: release-name-img
  replicas: 1
  template:
    metadata:
      labels:
        app: release-name-img
        version: v4
    spec:
      containers:
      - name: img
        image: denvasyliev/k8sdiy:build-802e329
        command:
          - ./app
          - "-role"
          - "img"
          - "-r"
          - "0.2"
          - "-server"
          - nats-cluster
        imagePullPolicy: Always
        env:
          - name: APP_DB
            value: "root@tcp(db:3306)/demo"
          - name: APP_CACHE
            value: "cache"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        securityContext:
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readinez
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 3
---
# Source: helm/charts/nats/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-nats
  namespace: default
  labels:
    helm.sh/chart: nats-0.15.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.7.4"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nats
      app.kubernetes.io/instance: release-name
  replicas: 1
  serviceName: release-name-nats

  podManagementPolicy: Parallel

  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "7777"
        prometheus.io/scrape: "true"
        checksum/config: 0ccd66d1796aef5698bac80d0f52204d3e94f5787c9dfd775d9441fc2253298b
      labels:
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: release-name
    spec:
      # Common volumes for the containers.
      volumes:
      - name: config-volume
        configMap:
          name: release-name-nats-config

      # Local volume shared with the reloader.
      - name: pid
        emptyDir: {}

      #################
      #               #
      #  TLS Volumes  #
      #               #
      #################

      # Required to be able to HUP signal and apply config
      # reload to the server without restarting the pod.
      shareProcessNamespace: true

      #################
      #               #
      #  NATS Server  #
      #               #
      #################
      terminationGracePeriodSeconds: 60
      containers:
      - name: nats
        image: nats:2.7.4-alpine
        imagePullPolicy: IfNotPresent
        resources:
          {}
        ports:
        - containerPort: 4222
          name: client
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        - containerPort: 7777
          name: metrics

        command:
        - "nats-server"
        - "--config"
        - "/etc/nats-config/nats.conf"

        # Required to be able to define an environment variable
        # that refers to other environment variables.  This env var
        # is later used as part of the configuration file.
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVER_NAME
          value: $(POD_NAME)
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: $(POD_NAME).release-name-nats.$(POD_NAMESPACE).svc.cluster.local
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nats-config
        - name: pid
          mountPath: /var/run/nats
        - name: release-name-nats-js-pvc
          mountPath: /data

        #######################
        #                     #
        # Healthcheck Probes  #
        #                     #
        #######################
        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            # for NATS server versions >=2.7.1, healthz will be enabled to allow for a grace period
            # in case of JetStream enabled deployments to form quorum and streams to catch up.
            path: /healthz
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 30

        # Gracefully stop NATS Server on pod deletion or image upgrade.
        #
        lifecycle:
          preStop:
            exec:
              # send the lame duck shutdown signal to trigger a graceful shutdown
              # nats-server will ignore the TERM signal it receives after this
              #
              command:
              - "nats-server"
              - "-sl=ldm=/var/run/nats/nats.pid"

      #################################
      #                               #
      #  NATS Configuration Reloader  #
      #                               #
      #################################
      - name: reloader
        image: natsio/nats-server-config-reloader:0.6.3
        imagePullPolicy: IfNotPresent
        resources:
          null
        command:
        - "nats-server-config-reloader"
        - "-pid"
        - "/var/run/nats/nats.pid"
        - "-config"
        - "/etc/nats-config/nats.conf"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nats-config
        - name: pid
          mountPath: /var/run/nats

      ##############################
      #                            #
      #  NATS Prometheus Exporter  #
      #                            #
      ##############################
      - name: metrics
        image: natsio/prometheus-nats-exporter:0.9.1
        imagePullPolicy: IfNotPresent
        resources:
          {}
        args:
        - -connz
        - -routez
        - -subz
        - -varz
        - -prefix=nats
        - -use_internal_server_id
        - http://localhost:8222/
        ports:
        - containerPort: 7777
          name: metrics

  volumeClaimTemplates:
  #####################################
  #                                   #
  #  Jetstream New Persistent Volume  #
  #                                   #
  #####################################
    - metadata:
        name: release-name-nats-js-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
# Source: helm/charts/api-gateway/templates/rbac.yaml
# Source: ambassador/templates/rbac.yaml
---
# Source: helm/charts/nats/templates/tests/test-request-reply.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-nats-test-request-reply"
  labels:
    helm.sh/chart: nats-0.15.0
    app.kubernetes.io/name: nats
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2.7.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
  - name: nats-box
    image: synadia/nats-box
    env:
    - name: NATS_HOST
      value: release-name-nats
    command:
    - /bin/sh
    - -ec
    - |
      nats reply -s nats://$NATS_HOST:4222 'name.>' --command "echo 1" &
    - |
      "&&"
    - |
      name=$(nats request -s nats://$NATS_HOST:4222 name.test '' 2>/dev/null)
    - |
      "&&"
    - |
      [ $name = test ]

  restartPolicy: Never
